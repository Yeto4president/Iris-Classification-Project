# %% [markdown]
# # Classification Iris - Exécution Contrôlée
# *Notebook conçu pour une exécution incrémentale avec suivi Git*

# %% [python]
# Cellule 1 - Configuration initiale
import papermill as pm
from IPython.display import display, Markdown
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import datasets

# Paramètres d'exécution contrôlée
STOP_AT = None  # Serra modifié par Papermill
current_section = ""

# Configuration reproductible
RANDOM_STATE = 42
np.random.seed(RANDOM_STATE)
plt.style.use('seaborn-v0_8')

# %% [python]
# Cellule 2 - Vérification de l'environnement
def check_environment():
    import sys
    env_info = f"""
    **Environnement d'exécution:**
    - Python: {sys.version.split()[0]}
    - Pandas: {pd.__version__}
    - Scikit-learn: {sklearn.__version__}
    - Dernière exécution: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
    """
    display(Markdown(env_info))

check_environment()

# %% [markdown]
# ## 1. Chargement des données
current_section = "Chargement"

# %% [python]
if STOP_AT and STOP_AT == current_section:
    raise pm.PapermillEarlyExit(f"Arrêt demandé à: {current_section}")

# Chargement avec cache
iris = datasets.load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='target')

# Vérification
display(Markdown("### Aperçu des données"))
display(X.head())
display(Markdown(f"\n**Shape:** {X.shape}"))

# %% [markdown]
# ## 2. Exploration des données
current_section = "Exploration"

# %% [python]
if STOP_AT and STOP_AT == current_section:
    raise pm.PapermillEarlyExit(f"Arrêt demandé à: {current_section}")

# %% [python]
# Statistiques descriptives
display(Markdown("### Statistiques descriptives"))
stats = X.describe().T
stats['skewness'] = X.skew()
display(stats)

# %% [python]
# Visualisation
display(Markdown("### Visualisation des caractéristiques"))
fig, axes = plt.subplots(2, 2, figsize=(12, 8))
for ax, feature in zip(axes.ravel(), X.columns):
    sns.boxplot(x=y, y=X[feature], ax=ax)
    ax.set_title(feature)
plt.tight_layout()
plt.savefig('notebooks/outputs/boxplots.png', dpi=120)
plt.show()

# %% [markdown]
# ## 3. Préprocessing
current_section = "Préprocessing"

# %% [python]
if STOP_AT and STOP_AT == current_section:
    raise pm.PapermillEarlyExit(f"Arrêt demandé à: {current_section}")

# %% [python]
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.3, random_state=RANDOM_STATE
)

display(Markdown(f"""
**Données transformées:**
- Train shape: {X_train.shape}
- Test shape: {X_test.shape}
"""))

# %% [markdown]
# ## 4. Modélisation
current_section = "Modélisation"

# %% [python]
if STOP_AT and STOP_AT == current_section:
    raise pm.PapermillEarlyExit(f"Arrêt demandé à: {current_section}")

# %% [python]
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Initialisation modèle
model = RandomForestClassifier(
    n_estimators=100,
    random_state=RANDOM_STATE
)

# Entraînement
model.fit(X_train, y_train)

# Évaluation
y_pred = model.predict(X_test)
report = classification_report(y_test, y_pred, output_dict=True)

# %% [python]
# Affichage des résultats
display(Markdown("### Résultats d'évaluation"))
pd.DataFrame(report).T.round(2)

# %% [python]
# Sauvegarde du modèle
import joblib
joblib.dump(model, 'notebooks/outputs/model.joblib')

# %% [markdown]
# ## 5. Rapport final
current_section = "Rapport"

# %% [python]
if STOP_AT and STOP_AT == current_section:
    raise pm.PapermillEarlyExit(f"Arrêt demandé à: {current_section}")

# %% [python]
# Génération automatique du rapport
report_md = f"""
# Rapport de classification Iris

## Performances
- Accuracy: {report['accuracy']:.2%}
- Macro F1: {report['macro avg']['f1-score']:.2%}

## Visualisations
![Boxplots](outputs/boxplots.png)
"""

with open('notebooks/outputs/report.md', 'w') as f:
    f.write(report_md)

display(Markdown(report_md))

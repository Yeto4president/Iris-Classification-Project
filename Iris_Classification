# %% [markdown]
# # Classification Iris - Visualisations Optimisées

# %% [python]
# Configuration initiale
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from sklearn import datasets

# Configuration des visuels
%matplotlib inline
plt.rcParams['figure.dpi'] = 120
plt.rcParams['savefig.dpi'] = 300
sns.set_theme(style="whitegrid", palette="husl")
matplotlib.rc('font', size=10)
matplotlib.rc('axes', titlesize=12)

# %% [python]
# 1. Chargement des données
iris = datasets.load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='target')

# %% [python]
# 2. Visualisations Fonctionnelles
print("\n=== Visualisation des Distributions ===")
fig, axes = plt.subplots(2, 2, figsize=(12, 8))
fig.suptitle('Distribution des Caractéristiques par Classe')

for ax, feature in zip(axes.ravel(), X.columns):
    sns.boxplot(x=y, y=X[feature], ax=ax)
    ax.set_title(feature.replace(' (cm)', ''))
plt.tight_layout()
plt.savefig('notebooks/outputs/feature_distributions.png', bbox_inches='tight')
plt.show()  # Nécessaire pour afficher dans certains environnements

# %% [python]
# Matrice de Corrélation
print("\n=== Matrice de Corrélation ===")
corr_matrix = X.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Matrice de Corrélation des Caractéristiques')
plt.savefig('notebooks/outputs/correlation_matrix.png', bbox_inches='tight')
plt.show()

# %% [python]
# 3. Pairplot avec Seaborn
print("\n=== Relations Multivariées ===")
df_vis = X.copy()
df_vis['target'] = y
sns.pairplot(df_vis, hue='target', height=2, corner=True)
plt.suptitle('Relations entre Variables par Classe', y=1.02)
plt.savefig('notebooks/outputs/pairplot.png', bbox_inches='tight')
plt.show()
